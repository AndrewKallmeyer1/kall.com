{"ast":null,"code":"import { MediaProviderElement } from \"./chunk.BJN6YOPG.js\";\nimport { __decorateClass } from \"./chunk.LNH2V2XS.js\";\n\n// src/providers/html5/Html5MediaElement.ts\nimport { DisposalBin, getNumberOfDecimalPlaces, getSlottedChildren, isNil, isNumber, isScalarArrayEqual, isUndefined, keysOf, listen, setAttribute, vdsEvent } from \"@vidstack/foundation\";\nimport { property } from \"lit/decorators.js\";\nvar AUDIO_EXTENSIONS = /\\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nvar VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v|avi)($|\\?)/i;\nfunction getMediaTypeFromExt(src) {\n  if (AUDIO_EXTENSIONS.test(src)) return \"audio\" /* Audio */;\n  if (VIDEO_EXTENSIONS.test(src)) return \"video\" /* Video */;\n  return \"unknown\" /* Unknown */;\n}\nvar Html5MediaElement = class extends MediaProviderElement {\n  constructor() {\n    super(...arguments);\n    this.preload = \"metadata\";\n    this._timeRAF = void 0;\n    this._hasMediaElementConnected = false;\n    this._mediaElementDisposal = new DisposalBin();\n    this._isMediaWaiting = false;\n    this._ignoreNextAbortEvent = false;\n    this._ignoreNextEmptiedEvent = false;\n  }\n  get mediaElement() {\n    return this._mediaElement;\n  }\n  disconnectedCallback() {\n    this._isMediaWaiting = false;\n    super.disconnectedCallback();\n    this._cancelTimeUpdates();\n  }\n  destroy() {\n    if (this.mediaElement) {\n      this.mediaElement.pause();\n      this.mediaElement.src = \"\";\n      this.mediaElement.innerHTML = \"\";\n      this.mediaElement.load();\n    }\n    super.destroy();\n  }\n  _cancelTimeUpdates() {\n    if (isNumber(this._timeRAF)) window.cancelAnimationFrame(this._timeRAF);\n    this._timeRAF = void 0;\n  }\n  _requestTimeUpdates() {\n    if (!isUndefined(this._timeRAF)) return;\n    this._requestTimeUpdate();\n  }\n  _requestTimeUpdate() {\n    const newTime = this.mediaElement?.currentTime ?? 0;\n    if (this.state.currentTime !== newTime) {\n      this._updateCurrentTime(newTime);\n    }\n    this._timeRAF = window.requestAnimationFrame(() => {\n      if (isUndefined(this._timeRAF)) return;\n      this._requestTimeUpdate();\n    });\n  }\n  _updateCurrentTime(newTime, triggerEvent) {\n    this.dispatchEvent(vdsEvent(\"vds-time-update\", {\n      detail: {\n        currentTime: Math.min(newTime, this.mediaElement?.duration ?? 0),\n        played: this.mediaElement.played\n      },\n      triggerEvent\n    }));\n  }\n  handleDefaultSlotChange() {\n    this._handleMediaElementDisconnect();\n    this._handleMediaElementConnect();\n  }\n  get _canMediaElementConnect() {\n    return this.canLoad && !isNil(this.mediaElement) && !this._hasMediaElementConnected;\n  }\n  _findSlottedMediaElement() {\n    const mediaElement = getSlottedChildren(this)[0];\n    const tagName = mediaElement?.tagName ?? \"\";\n    if (!/^(audio|video)$/i.test(tagName)) {\n      if (true) {\n        throw Error(`[vds]: expected <audio> or <video> in default slot. Received: <${tagName}>.`);\n      }\n    }\n    this._mediaElement = mediaElement ?? void 0;\n  }\n  _handleMediaElementConnect() {\n    window.requestAnimationFrame(() => {\n      this._findSlottedMediaElement();\n      if (!this._canMediaElementConnect) return;\n      const mediaEl = this.mediaElement;\n      if (mediaEl.hasAttribute(\"loop\")) {\n        this.loop = true;\n      }\n      mediaEl.removeAttribute(\"loop\");\n      mediaEl.removeAttribute(\"poster\");\n      setAttribute(mediaEl, \"controls\", this.controls);\n      if (!this.state.canFullscreen && this.fullscreenController.isSupported) {\n        this.dispatchEvent(vdsEvent(\"vds-fullscreen-support-change\", {\n          detail: this.canFullscreen\n        }));\n      }\n      this._attachMediaEventListeners();\n      this._observePlaysinline();\n      this._observeMediaSources();\n      if (this.canLoadPoster && this.poster.length > 0 && mediaEl.getAttribute(\"poster\") !== this.poster) {\n        mediaEl.setAttribute(\"poster\", this.poster);\n      }\n      this._startPreloadingMedia();\n      if (true) {\n        this._logger?.infoGroup(\"Media element connected\").labelledLog(\"Media Element\", mediaEl).dispatch();\n      }\n      this._hasMediaElementConnected = true;\n      this._disconnectDisposal.add(this._handleMediaElementDisconnect.bind(this));\n    });\n  }\n  _handleMediaElementDisconnect() {\n    this._cancelTimeUpdates();\n    window.requestAnimationFrame(() => {\n      this._mediaElementDisposal.empty();\n      this._mediaElement = void 0;\n    });\n    if (this._hasMediaElementConnected && true) {\n      this._logger?.infoGroup(\"Media element disconnected\").labelledLog(\"Media Element\", this.mediaElement).dispatch();\n    }\n    this._hasMediaElementConnected = false;\n  }\n  startLoadingMedia() {\n    super.startLoadingMedia();\n    this._handleMediaElementConnect();\n  }\n  _startPreloadingMedia() {\n    if (this.state.canPlay) return;\n    this.mediaElement.setAttribute(\"preload\", this.preload);\n    const isNetworkActive = this.mediaElement.networkState >= 1;\n    this._ignoreNextAbortEvent = isNetworkActive;\n    this._ignoreNextEmptiedEvent = isNetworkActive;\n    this.mediaElement.load();\n    setTimeout(() => {\n      this._ignoreNextAbortEvent = false;\n      this._ignoreNextEmptiedEvent = false;\n    }, 0);\n  }\n  _observePlaysinline() {\n    const isPlayingInline = () => this.mediaElement.hasAttribute(\"playsinline\");\n    this._handlePlaysinlineChange(isPlayingInline());\n    const observer = new MutationObserver(() => this._handlePlaysinlineChange(isPlayingInline()));\n    observer.observe(this.mediaElement, {\n      attributeFilter: [\"playsinline\"]\n    });\n    this._mediaElementDisposal.add(() => observer.disconnect());\n  }\n  _handlePlaysinlineChange(playsinline) {\n    this.dispatchEvent(vdsEvent(\"vds-playsinline-change\", {\n      detail: playsinline\n    }));\n  }\n  _observeMediaSources() {\n    this._handleSrcChange(this._getMediaSources());\n    const observer = new MutationObserver(() => this._handleSrcChange(this._getMediaSources()));\n    observer.observe(this.mediaElement, {\n      attributeFilter: [\"src\"],\n      subtree: true\n    });\n    this._mediaElementDisposal.add(() => observer.disconnect());\n  }\n  _handleSrcChange(sources) {\n    const prevSources = this.state.src;\n    if (!isScalarArrayEqual(prevSources, sources)) {\n      this.dispatchEvent(vdsEvent(\"vds-src-change\", {\n        detail: sources\n      }));\n    }\n  }\n  _getMediaSources() {\n    const resources = [this.mediaElement?.src, ...Array.from(this.mediaElement?.querySelectorAll(\"source\") ?? []).map(source => source.src)].filter(Boolean);\n    return Array.from(new Set(resources));\n  }\n  _getMediaMetadata() {\n    return {\n      src: this.state.src,\n      currentSrc: this.mediaElement.currentSrc,\n      duration: this.mediaElement.duration || 0,\n      poster: this.mediaElement.poster,\n      mediaType: this._getMediaType(),\n      viewType: this.state.viewType\n    };\n  }\n  _attachMediaEventListeners() {\n    if (isNil(this.mediaElement)) return;\n    const mediaEventListeners = {\n      abort: this._handleAbort,\n      canplay: this._handleCanPlay,\n      canplaythrough: this._handleCanPlayThrough,\n      durationchange: this._handleDurationChange,\n      emptied: this._handleEmptied,\n      ended: this._handleEnded,\n      error: this._handleError,\n      loadeddata: this._handleLoadedData,\n      loadedmetadata: this._handleLoadedMetadata,\n      loadstart: this._handleLoadStart,\n      pause: this._handlePause,\n      play: this._handlePlay,\n      playing: this._handlePlaying,\n      progress: this._handleProgress,\n      ratechange: this._handleRateChange,\n      seeked: this._handleSeeked,\n      seeking: this._handleSeeking,\n      stalled: this._handleStalled,\n      suspend: this._handleSuspend,\n      volumechange: this._handleVolumeChange,\n      waiting: this._handleWaiting\n    };\n    keysOf(mediaEventListeners).forEach(type => {\n      const handler = mediaEventListeners[type].bind(this);\n      const off = listen(this.mediaElement, type, async event => {\n        if (true) {\n          this._logger?.debugGroup(`\\u{1F4FA} fired \\`${event.type}\\``).labelledLog(\"Event\", event).labelledLog(\"State\", {\n            ...this.state\n          }).dispatch();\n        }\n        await handler(event);\n      });\n      this._mediaElementDisposal.add(off);\n    });\n    if (true) {\n      this._logger?.debug(\"attached event listeners\");\n    }\n  }\n  _handleAbort(event) {\n    if (this._ignoreNextAbortEvent) return;\n    this.dispatchEvent(vdsEvent(\"vds-abort\", {\n      triggerEvent: event\n    }));\n    this._handleCurrentSrcChange(\"\", event);\n  }\n  _handleCanPlay(event) {\n    this._handleMediaReady({\n      event,\n      duration: this.mediaElement.duration\n    });\n  }\n  _handleCanPlayThrough(event) {\n    if (this.state.started) return;\n    this.dispatchEvent(vdsEvent(\"vds-can-play-through\", {\n      triggerEvent: event,\n      detail: {\n        duration: this.mediaElement.duration\n      }\n    }));\n  }\n  _handleLoadStart(event) {\n    this._handleCurrentSrcChange(this.mediaElement.currentSrc, event);\n    if (this.mediaElement.currentSrc === \"\") {\n      this._handleAbort();\n      return;\n    }\n    this.dispatchEvent(vdsEvent(\"vds-load-start\", {\n      triggerEvent: event,\n      detail: this._getMediaMetadata()\n    }));\n  }\n  _handleEmptied(event) {\n    if (this._ignoreNextEmptiedEvent) return;\n    this.dispatchEvent(vdsEvent(\"vds-emptied\", {\n      triggerEvent: event\n    }));\n  }\n  _handleLoadedData(event) {\n    this.dispatchEvent(vdsEvent(\"vds-loaded-data\", {\n      triggerEvent: event\n    }));\n  }\n  _handleLoadedMetadata(event) {\n    this.dispatchEvent(vdsEvent(\"vds-volume-change\", {\n      detail: {\n        volume: this.mediaElement.volume,\n        muted: this.mediaElement.muted\n      }\n    }));\n    this.dispatchEvent(vdsEvent(\"vds-loaded-metadata\", {\n      triggerEvent: event,\n      detail: this._getMediaMetadata()\n    }));\n  }\n  _determineMediaType(event) {\n    this.dispatchEvent(vdsEvent(\"vds-media-type-change\", {\n      detail: this._getMediaType(),\n      triggerEvent: event\n    }));\n  }\n  _handlePlay(event) {\n    const playEvent = vdsEvent(\"vds-play\", {\n      triggerEvent: event\n    });\n    playEvent.autoplay = this._attemptingAutoplay;\n    this.dispatchEvent(playEvent);\n  }\n  _handlePause(event) {\n    if (this.mediaElement.readyState === 1 && !this._isMediaWaiting) {\n      return;\n    }\n    this._isMediaWaiting = false;\n    this._cancelTimeUpdates();\n    this.dispatchEvent(vdsEvent(\"vds-pause\", {\n      triggerEvent: event\n    }));\n  }\n  _handlePlaying(event) {\n    this._isMediaWaiting = false;\n    const playingEvent = vdsEvent(\"vds-playing\", {\n      triggerEvent: event\n    });\n    this.dispatchEvent(playingEvent);\n    this._requestTimeUpdates();\n  }\n  _handleDurationChange(event) {\n    if (this.mediaElement.ended) {\n      this._updateCurrentTime(this.mediaElement.duration, event);\n    }\n    this.dispatchEvent(vdsEvent(\"vds-duration-change\", {\n      detail: this.mediaElement.duration,\n      triggerEvent: event\n    }));\n  }\n  _handleProgress(event) {\n    this.dispatchEvent(vdsEvent(\"vds-progress\", {\n      triggerEvent: event,\n      detail: {\n        buffered: this.mediaElement.buffered,\n        seekable: this.mediaElement.seekable\n      }\n    }));\n  }\n  _handleRateChange(event) {\n    throw Error(\"Not implemented\");\n  }\n  _handleSeeking(event) {\n    this.dispatchEvent(vdsEvent(\"vds-seeking\", {\n      detail: this.mediaElement.currentTime,\n      triggerEvent: event\n    }));\n  }\n  _handleSeeked(event) {\n    const seekedEvent = vdsEvent(\"vds-seeked\", {\n      detail: this.mediaElement.currentTime,\n      triggerEvent: event\n    });\n    this.dispatchEvent(seekedEvent);\n    const currentTime = this.mediaElement.currentTime;\n    if (Math.trunc(currentTime) === Math.trunc(this.mediaElement.duration) && getNumberOfDecimalPlaces(this.mediaElement.duration) > getNumberOfDecimalPlaces(currentTime)) {\n      this._updateCurrentTime(this.mediaElement.duration, event);\n      if (!this.mediaElement.ended) {\n        try {\n          this.play();\n        } catch (e) {}\n      }\n    }\n  }\n  _handleStalled(event) {\n    this.dispatchEvent(vdsEvent(\"vds-stalled\", {\n      triggerEvent: event\n    }));\n    if (this.mediaElement.readyState < 3) {\n      this._isMediaWaiting = true;\n      this.dispatchEvent(vdsEvent(\"vds-waiting\", {\n        triggerEvent: event\n      }));\n    }\n  }\n  _handleVolumeChange(event) {\n    this.dispatchEvent(vdsEvent(\"vds-volume-change\", {\n      detail: {\n        volume: this.mediaElement.volume,\n        muted: this.mediaElement.muted\n      },\n      triggerEvent: event\n    }));\n  }\n  _handleWaiting(event) {\n    if (this.mediaElement.readyState < 3) {\n      this._isMediaWaiting = true;\n      this.dispatchEvent(vdsEvent(\"vds-waiting\", {\n        triggerEvent: event\n      }));\n    }\n  }\n  _handleSuspend(event) {\n    const suspendEvent = vdsEvent(\"vds-suspend\", {\n      triggerEvent: event\n    });\n    this.dispatchEvent(suspendEvent);\n  }\n  _handleEnded(event) {\n    this._cancelTimeUpdates();\n    this._updateCurrentTime(this.mediaElement.duration, event);\n    const endEvent = vdsEvent(\"vds-end\", {\n      triggerEvent: event\n    });\n    this.dispatchEvent(endEvent);\n    if (this.state.loop) {\n      this._handleLoop();\n    } else {\n      this.dispatchEvent(vdsEvent(\"vds-ended\", {\n        triggerEvent: event\n      }));\n    }\n  }\n  _handleLoop() {\n    const hasCustomControls = isNil(this.controls);\n    if (hasCustomControls) {\n      this.mediaElement.controls = false;\n    }\n    this.dispatchEvent(vdsEvent(\"vds-loop-request\"));\n  }\n  _handleError(event) {\n    const mediaError = this.mediaElement.error;\n    if (!mediaError) return;\n    this.dispatchEvent(vdsEvent(\"vds-error\", {\n      detail: {\n        message: mediaError.message,\n        code: mediaError.code,\n        mediaError\n      },\n      triggerEvent: event\n    }));\n  }\n  _getPaused() {\n    return this.mediaElement?.paused ?? true;\n  }\n  _getVolume() {\n    return this.mediaElement?.volume ?? 1;\n  }\n  _setVolume(newVolume) {\n    this.mediaElement.volume = newVolume;\n  }\n  _getCurrentTime() {\n    return this.mediaElement?.currentTime ?? 0;\n  }\n  _setCurrentTime(newTime) {\n    if (this.mediaElement.currentTime !== newTime) {\n      this.mediaElement.currentTime = newTime;\n    }\n  }\n  _getMuted() {\n    return this.mediaElement?.muted ?? false;\n  }\n  _setMuted(isMuted) {\n    this.mediaElement.muted = isMuted;\n  }\n  async play() {\n    if (true) {\n      this._logger?.info(\"attempting to play...\");\n    }\n    try {\n      this._throwIfNotReadyForPlayback();\n      await this._resetPlaybackIfEnded();\n      return this.mediaElement?.play();\n    } catch (error) {\n      const playErrorEvent = vdsEvent(\"vds-play-fail\");\n      playErrorEvent.autoplay = this._attemptingAutoplay;\n      playErrorEvent.error = error;\n      throw error;\n    }\n  }\n  async pause() {\n    if (true) {\n      this._logger?.info(\"attempting to pause...\");\n    }\n    return this.mediaElement?.pause();\n  }\n  _getMediaType() {\n    return getMediaTypeFromExt(this.state.currentSrc);\n  }\n};\n__decorateClass([property()], Html5MediaElement.prototype, \"preload\", 2);\nexport { AUDIO_EXTENSIONS, VIDEO_EXTENSIONS, Html5MediaElement };","map":{"version":3,"names":["MediaProviderElement","__decorateClass","DisposalBin","getNumberOfDecimalPlaces","getSlottedChildren","isNil","isNumber","isScalarArrayEqual","isUndefined","keysOf","listen","setAttribute","vdsEvent","property","AUDIO_EXTENSIONS","VIDEO_EXTENSIONS","getMediaTypeFromExt","src","test","Html5MediaElement","constructor","arguments","preload","_timeRAF","_hasMediaElementConnected","_mediaElementDisposal","_isMediaWaiting","_ignoreNextAbortEvent","_ignoreNextEmptiedEvent","mediaElement","_mediaElement","disconnectedCallback","_cancelTimeUpdates","destroy","pause","innerHTML","load","window","cancelAnimationFrame","_requestTimeUpdates","_requestTimeUpdate","newTime","currentTime","state","_updateCurrentTime","requestAnimationFrame","triggerEvent","dispatchEvent","detail","Math","min","duration","played","handleDefaultSlotChange","_handleMediaElementDisconnect","_handleMediaElementConnect","_canMediaElementConnect","canLoad","_findSlottedMediaElement","tagName","Error","mediaEl","hasAttribute","loop","removeAttribute","controls","canFullscreen","fullscreenController","isSupported","_attachMediaEventListeners","_observePlaysinline","_observeMediaSources","canLoadPoster","poster","length","getAttribute","_startPreloadingMedia","_logger","infoGroup","labelledLog","dispatch","_disconnectDisposal","add","bind","empty","startLoadingMedia","canPlay","isNetworkActive","networkState","setTimeout","isPlayingInline","_handlePlaysinlineChange","observer","MutationObserver","observe","attributeFilter","disconnect","playsinline","_handleSrcChange","_getMediaSources","subtree","sources","prevSources","resources","Array","from","querySelectorAll","map","source","filter","Boolean","Set","_getMediaMetadata","currentSrc","mediaType","_getMediaType","viewType","mediaEventListeners","abort","_handleAbort","canplay","_handleCanPlay","canplaythrough","_handleCanPlayThrough","durationchange","_handleDurationChange","emptied","_handleEmptied","ended","_handleEnded","error","_handleError","loadeddata","_handleLoadedData","loadedmetadata","_handleLoadedMetadata","loadstart","_handleLoadStart","_handlePause","play","_handlePlay","playing","_handlePlaying","progress","_handleProgress","ratechange","_handleRateChange","seeked","_handleSeeked","seeking","_handleSeeking","stalled","_handleStalled","suspend","_handleSuspend","volumechange","_handleVolumeChange","waiting","_handleWaiting","forEach","type","handler","off","event","debugGroup","debug","_handleCurrentSrcChange","_handleMediaReady","started","volume","muted","_determineMediaType","playEvent","autoplay","_attemptingAutoplay","readyState","playingEvent","buffered","seekable","seekedEvent","trunc","e","suspendEvent","endEvent","_handleLoop","hasCustomControls","mediaError","message","code","_getPaused","paused","_getVolume","_setVolume","newVolume","_getCurrentTime","_setCurrentTime","_getMuted","_setMuted","isMuted","info","_throwIfNotReadyForPlayback","_resetPlaybackIfEnded","playErrorEvent","prototype"],"sources":["/Users/andrewkallmeyer/kall.com/node_modules/@vidstack/player/dist/dev/chunks/chunk.RVJZRTLD.js"],"sourcesContent":["import {\n  MediaProviderElement\n} from \"./chunk.BJN6YOPG.js\";\nimport {\n  __decorateClass\n} from \"./chunk.LNH2V2XS.js\";\n\n// src/providers/html5/Html5MediaElement.ts\nimport {\n  DisposalBin,\n  getNumberOfDecimalPlaces,\n  getSlottedChildren,\n  isNil,\n  isNumber,\n  isScalarArrayEqual,\n  isUndefined,\n  keysOf,\n  listen,\n  setAttribute,\n  vdsEvent\n} from \"@vidstack/foundation\";\nimport { property } from \"lit/decorators.js\";\nvar AUDIO_EXTENSIONS = /\\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nvar VIDEO_EXTENSIONS = /\\.(mp4|og[gv]|webm|mov|m4v|avi)($|\\?)/i;\nfunction getMediaTypeFromExt(src) {\n  if (AUDIO_EXTENSIONS.test(src))\n    return \"audio\" /* Audio */;\n  if (VIDEO_EXTENSIONS.test(src))\n    return \"video\" /* Video */;\n  return \"unknown\" /* Unknown */;\n}\nvar Html5MediaElement = class extends MediaProviderElement {\n  constructor() {\n    super(...arguments);\n    this.preload = \"metadata\";\n    this._timeRAF = void 0;\n    this._hasMediaElementConnected = false;\n    this._mediaElementDisposal = new DisposalBin();\n    this._isMediaWaiting = false;\n    this._ignoreNextAbortEvent = false;\n    this._ignoreNextEmptiedEvent = false;\n  }\n  get mediaElement() {\n    return this._mediaElement;\n  }\n  disconnectedCallback() {\n    this._isMediaWaiting = false;\n    super.disconnectedCallback();\n    this._cancelTimeUpdates();\n  }\n  destroy() {\n    if (this.mediaElement) {\n      this.mediaElement.pause();\n      this.mediaElement.src = \"\";\n      this.mediaElement.innerHTML = \"\";\n      this.mediaElement.load();\n    }\n    super.destroy();\n  }\n  _cancelTimeUpdates() {\n    if (isNumber(this._timeRAF))\n      window.cancelAnimationFrame(this._timeRAF);\n    this._timeRAF = void 0;\n  }\n  _requestTimeUpdates() {\n    if (!isUndefined(this._timeRAF))\n      return;\n    this._requestTimeUpdate();\n  }\n  _requestTimeUpdate() {\n    const newTime = this.mediaElement?.currentTime ?? 0;\n    if (this.state.currentTime !== newTime) {\n      this._updateCurrentTime(newTime);\n    }\n    this._timeRAF = window.requestAnimationFrame(() => {\n      if (isUndefined(this._timeRAF))\n        return;\n      this._requestTimeUpdate();\n    });\n  }\n  _updateCurrentTime(newTime, triggerEvent) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-time-update\", {\n        detail: {\n          currentTime: Math.min(newTime, this.mediaElement?.duration ?? 0),\n          played: this.mediaElement.played\n        },\n        triggerEvent\n      })\n    );\n  }\n  handleDefaultSlotChange() {\n    this._handleMediaElementDisconnect();\n    this._handleMediaElementConnect();\n  }\n  get _canMediaElementConnect() {\n    return this.canLoad && !isNil(this.mediaElement) && !this._hasMediaElementConnected;\n  }\n  _findSlottedMediaElement() {\n    const mediaElement = getSlottedChildren(this)[0];\n    const tagName = mediaElement?.tagName ?? \"\";\n    if (!/^(audio|video)$/i.test(tagName)) {\n      if (true) {\n        throw Error(`[vds]: expected <audio> or <video> in default slot. Received: <${tagName}>.`);\n      }\n    }\n    this._mediaElement = mediaElement ?? void 0;\n  }\n  _handleMediaElementConnect() {\n    window.requestAnimationFrame(() => {\n      this._findSlottedMediaElement();\n      if (!this._canMediaElementConnect)\n        return;\n      const mediaEl = this.mediaElement;\n      if (mediaEl.hasAttribute(\"loop\")) {\n        this.loop = true;\n      }\n      mediaEl.removeAttribute(\"loop\");\n      mediaEl.removeAttribute(\"poster\");\n      setAttribute(mediaEl, \"controls\", this.controls);\n      if (!this.state.canFullscreen && this.fullscreenController.isSupported) {\n        this.dispatchEvent(\n          vdsEvent(\"vds-fullscreen-support-change\", {\n            detail: this.canFullscreen\n          })\n        );\n      }\n      this._attachMediaEventListeners();\n      this._observePlaysinline();\n      this._observeMediaSources();\n      if (this.canLoadPoster && this.poster.length > 0 && mediaEl.getAttribute(\"poster\") !== this.poster) {\n        mediaEl.setAttribute(\"poster\", this.poster);\n      }\n      this._startPreloadingMedia();\n      if (true) {\n        this._logger?.infoGroup(\"Media element connected\").labelledLog(\"Media Element\", mediaEl).dispatch();\n      }\n      this._hasMediaElementConnected = true;\n      this._disconnectDisposal.add(this._handleMediaElementDisconnect.bind(this));\n    });\n  }\n  _handleMediaElementDisconnect() {\n    this._cancelTimeUpdates();\n    window.requestAnimationFrame(() => {\n      this._mediaElementDisposal.empty();\n      this._mediaElement = void 0;\n    });\n    if (this._hasMediaElementConnected && true) {\n      this._logger?.infoGroup(\"Media element disconnected\").labelledLog(\"Media Element\", this.mediaElement).dispatch();\n    }\n    this._hasMediaElementConnected = false;\n  }\n  startLoadingMedia() {\n    super.startLoadingMedia();\n    this._handleMediaElementConnect();\n  }\n  _startPreloadingMedia() {\n    if (this.state.canPlay)\n      return;\n    this.mediaElement.setAttribute(\"preload\", this.preload);\n    const isNetworkActive = this.mediaElement.networkState >= 1;\n    this._ignoreNextAbortEvent = isNetworkActive;\n    this._ignoreNextEmptiedEvent = isNetworkActive;\n    this.mediaElement.load();\n    setTimeout(() => {\n      this._ignoreNextAbortEvent = false;\n      this._ignoreNextEmptiedEvent = false;\n    }, 0);\n  }\n  _observePlaysinline() {\n    const isPlayingInline = () => this.mediaElement.hasAttribute(\"playsinline\");\n    this._handlePlaysinlineChange(isPlayingInline());\n    const observer = new MutationObserver(() => this._handlePlaysinlineChange(isPlayingInline()));\n    observer.observe(this.mediaElement, { attributeFilter: [\"playsinline\"] });\n    this._mediaElementDisposal.add(() => observer.disconnect());\n  }\n  _handlePlaysinlineChange(playsinline) {\n    this.dispatchEvent(vdsEvent(\"vds-playsinline-change\", { detail: playsinline }));\n  }\n  _observeMediaSources() {\n    this._handleSrcChange(this._getMediaSources());\n    const observer = new MutationObserver(() => this._handleSrcChange(this._getMediaSources()));\n    observer.observe(this.mediaElement, { attributeFilter: [\"src\"], subtree: true });\n    this._mediaElementDisposal.add(() => observer.disconnect());\n  }\n  _handleSrcChange(sources) {\n    const prevSources = this.state.src;\n    if (!isScalarArrayEqual(prevSources, sources)) {\n      this.dispatchEvent(vdsEvent(\"vds-src-change\", { detail: sources }));\n    }\n  }\n  _getMediaSources() {\n    const resources = [\n      this.mediaElement?.src,\n      ...Array.from(this.mediaElement?.querySelectorAll(\"source\") ?? []).map(\n        (source) => source.src\n      )\n    ].filter(Boolean);\n    return Array.from(new Set(resources));\n  }\n  _getMediaMetadata() {\n    return {\n      src: this.state.src,\n      currentSrc: this.mediaElement.currentSrc,\n      duration: this.mediaElement.duration || 0,\n      poster: this.mediaElement.poster,\n      mediaType: this._getMediaType(),\n      viewType: this.state.viewType\n    };\n  }\n  _attachMediaEventListeners() {\n    if (isNil(this.mediaElement))\n      return;\n    const mediaEventListeners = {\n      abort: this._handleAbort,\n      canplay: this._handleCanPlay,\n      canplaythrough: this._handleCanPlayThrough,\n      durationchange: this._handleDurationChange,\n      emptied: this._handleEmptied,\n      ended: this._handleEnded,\n      error: this._handleError,\n      loadeddata: this._handleLoadedData,\n      loadedmetadata: this._handleLoadedMetadata,\n      loadstart: this._handleLoadStart,\n      pause: this._handlePause,\n      play: this._handlePlay,\n      playing: this._handlePlaying,\n      progress: this._handleProgress,\n      ratechange: this._handleRateChange,\n      seeked: this._handleSeeked,\n      seeking: this._handleSeeking,\n      stalled: this._handleStalled,\n      suspend: this._handleSuspend,\n      volumechange: this._handleVolumeChange,\n      waiting: this._handleWaiting\n    };\n    keysOf(mediaEventListeners).forEach((type) => {\n      const handler = mediaEventListeners[type].bind(this);\n      const off = listen(this.mediaElement, type, async (event) => {\n        if (true) {\n          this._logger?.debugGroup(`\\u{1F4FA} fired \\`${event.type}\\``).labelledLog(\"Event\", event).labelledLog(\"State\", { ...this.state }).dispatch();\n        }\n        await handler(event);\n      });\n      this._mediaElementDisposal.add(off);\n    });\n    if (true) {\n      this._logger?.debug(\"attached event listeners\");\n    }\n  }\n  _handleAbort(event) {\n    if (this._ignoreNextAbortEvent)\n      return;\n    this.dispatchEvent(vdsEvent(\"vds-abort\", { triggerEvent: event }));\n    this._handleCurrentSrcChange(\"\", event);\n  }\n  _handleCanPlay(event) {\n    this._handleMediaReady({ event, duration: this.mediaElement.duration });\n  }\n  _handleCanPlayThrough(event) {\n    if (this.state.started)\n      return;\n    this.dispatchEvent(\n      vdsEvent(\"vds-can-play-through\", {\n        triggerEvent: event,\n        detail: { duration: this.mediaElement.duration }\n      })\n    );\n  }\n  _handleLoadStart(event) {\n    this._handleCurrentSrcChange(this.mediaElement.currentSrc, event);\n    if (this.mediaElement.currentSrc === \"\") {\n      this._handleAbort();\n      return;\n    }\n    this.dispatchEvent(\n      vdsEvent(\"vds-load-start\", {\n        triggerEvent: event,\n        detail: this._getMediaMetadata()\n      })\n    );\n  }\n  _handleEmptied(event) {\n    if (this._ignoreNextEmptiedEvent)\n      return;\n    this.dispatchEvent(vdsEvent(\"vds-emptied\", { triggerEvent: event }));\n  }\n  _handleLoadedData(event) {\n    this.dispatchEvent(vdsEvent(\"vds-loaded-data\", { triggerEvent: event }));\n  }\n  _handleLoadedMetadata(event) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-volume-change\", {\n        detail: {\n          volume: this.mediaElement.volume,\n          muted: this.mediaElement.muted\n        }\n      })\n    );\n    this.dispatchEvent(\n      vdsEvent(\"vds-loaded-metadata\", {\n        triggerEvent: event,\n        detail: this._getMediaMetadata()\n      })\n    );\n  }\n  _determineMediaType(event) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-media-type-change\", {\n        detail: this._getMediaType(),\n        triggerEvent: event\n      })\n    );\n  }\n  _handlePlay(event) {\n    const playEvent = vdsEvent(\"vds-play\", { triggerEvent: event });\n    playEvent.autoplay = this._attemptingAutoplay;\n    this.dispatchEvent(playEvent);\n  }\n  _handlePause(event) {\n    if (this.mediaElement.readyState === 1 && !this._isMediaWaiting) {\n      return;\n    }\n    this._isMediaWaiting = false;\n    this._cancelTimeUpdates();\n    this.dispatchEvent(vdsEvent(\"vds-pause\", { triggerEvent: event }));\n  }\n  _handlePlaying(event) {\n    this._isMediaWaiting = false;\n    const playingEvent = vdsEvent(\"vds-playing\", { triggerEvent: event });\n    this.dispatchEvent(playingEvent);\n    this._requestTimeUpdates();\n  }\n  _handleDurationChange(event) {\n    if (this.mediaElement.ended) {\n      this._updateCurrentTime(this.mediaElement.duration, event);\n    }\n    this.dispatchEvent(\n      vdsEvent(\"vds-duration-change\", {\n        detail: this.mediaElement.duration,\n        triggerEvent: event\n      })\n    );\n  }\n  _handleProgress(event) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-progress\", {\n        triggerEvent: event,\n        detail: {\n          buffered: this.mediaElement.buffered,\n          seekable: this.mediaElement.seekable\n        }\n      })\n    );\n  }\n  _handleRateChange(event) {\n    throw Error(\"Not implemented\");\n  }\n  _handleSeeking(event) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-seeking\", {\n        detail: this.mediaElement.currentTime,\n        triggerEvent: event\n      })\n    );\n  }\n  _handleSeeked(event) {\n    const seekedEvent = vdsEvent(\"vds-seeked\", {\n      detail: this.mediaElement.currentTime,\n      triggerEvent: event\n    });\n    this.dispatchEvent(seekedEvent);\n    const currentTime = this.mediaElement.currentTime;\n    if (Math.trunc(currentTime) === Math.trunc(this.mediaElement.duration) && getNumberOfDecimalPlaces(this.mediaElement.duration) > getNumberOfDecimalPlaces(currentTime)) {\n      this._updateCurrentTime(this.mediaElement.duration, event);\n      if (!this.mediaElement.ended) {\n        try {\n          this.play();\n        } catch (e) {\n        }\n      }\n    }\n  }\n  _handleStalled(event) {\n    this.dispatchEvent(vdsEvent(\"vds-stalled\", { triggerEvent: event }));\n    if (this.mediaElement.readyState < 3) {\n      this._isMediaWaiting = true;\n      this.dispatchEvent(vdsEvent(\"vds-waiting\", { triggerEvent: event }));\n    }\n  }\n  _handleVolumeChange(event) {\n    this.dispatchEvent(\n      vdsEvent(\"vds-volume-change\", {\n        detail: {\n          volume: this.mediaElement.volume,\n          muted: this.mediaElement.muted\n        },\n        triggerEvent: event\n      })\n    );\n  }\n  _handleWaiting(event) {\n    if (this.mediaElement.readyState < 3) {\n      this._isMediaWaiting = true;\n      this.dispatchEvent(vdsEvent(\"vds-waiting\", { triggerEvent: event }));\n    }\n  }\n  _handleSuspend(event) {\n    const suspendEvent = vdsEvent(\"vds-suspend\", { triggerEvent: event });\n    this.dispatchEvent(suspendEvent);\n  }\n  _handleEnded(event) {\n    this._cancelTimeUpdates();\n    this._updateCurrentTime(this.mediaElement.duration, event);\n    const endEvent = vdsEvent(\"vds-end\", { triggerEvent: event });\n    this.dispatchEvent(endEvent);\n    if (this.state.loop) {\n      this._handleLoop();\n    } else {\n      this.dispatchEvent(vdsEvent(\"vds-ended\", { triggerEvent: event }));\n    }\n  }\n  _handleLoop() {\n    const hasCustomControls = isNil(this.controls);\n    if (hasCustomControls) {\n      this.mediaElement.controls = false;\n    }\n    this.dispatchEvent(vdsEvent(\"vds-loop-request\"));\n  }\n  _handleError(event) {\n    const mediaError = this.mediaElement.error;\n    if (!mediaError)\n      return;\n    this.dispatchEvent(\n      vdsEvent(\"vds-error\", {\n        detail: {\n          message: mediaError.message,\n          code: mediaError.code,\n          mediaError\n        },\n        triggerEvent: event\n      })\n    );\n  }\n  _getPaused() {\n    return this.mediaElement?.paused ?? true;\n  }\n  _getVolume() {\n    return this.mediaElement?.volume ?? 1;\n  }\n  _setVolume(newVolume) {\n    this.mediaElement.volume = newVolume;\n  }\n  _getCurrentTime() {\n    return this.mediaElement?.currentTime ?? 0;\n  }\n  _setCurrentTime(newTime) {\n    if (this.mediaElement.currentTime !== newTime) {\n      this.mediaElement.currentTime = newTime;\n    }\n  }\n  _getMuted() {\n    return this.mediaElement?.muted ?? false;\n  }\n  _setMuted(isMuted) {\n    this.mediaElement.muted = isMuted;\n  }\n  async play() {\n    if (true) {\n      this._logger?.info(\"attempting to play...\");\n    }\n    try {\n      this._throwIfNotReadyForPlayback();\n      await this._resetPlaybackIfEnded();\n      return this.mediaElement?.play();\n    } catch (error) {\n      const playErrorEvent = vdsEvent(\"vds-play-fail\");\n      playErrorEvent.autoplay = this._attemptingAutoplay;\n      playErrorEvent.error = error;\n      throw error;\n    }\n  }\n  async pause() {\n    if (true) {\n      this._logger?.info(\"attempting to pause...\");\n    }\n    return this.mediaElement?.pause();\n  }\n  _getMediaType() {\n    return getMediaTypeFromExt(this.state.currentSrc);\n  }\n};\n__decorateClass([\n  property()\n], Html5MediaElement.prototype, \"preload\", 2);\n\nexport {\n  AUDIO_EXTENSIONS,\n  VIDEO_EXTENSIONS,\n  Html5MediaElement\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}