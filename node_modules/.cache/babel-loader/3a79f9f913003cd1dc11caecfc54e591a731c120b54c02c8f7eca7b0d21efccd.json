{"ast":null,"code":"import { createMediaStore } from \"./chunk.O2H47C42.js\";\nimport { __decorateClass } from \"./chunk.LNH2V2XS.js\";\n\n// src/media/provider/MediaProviderElement.ts\nimport { clampNumber, copyStoreRecords, createIntersectionController, discoverable, DisposalBin, FullscreenController, hostRequestQueue, isUndefined, listen, LogDispatcher, raf, requestIdleCallback, RequestQueue, ScreenOrientationController, unwrapStoreRecord, vdsEvent } from \"@vidstack/foundation\";\nimport { html, LitElement } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nvar mediaProviderDiscoveryId = Symbol(\"@vidstack/media-provider-discovery\");\nvar MediaProviderElement = class extends LitElement {\n  constructor() {\n    super();\n    this._disconnectDisposal = new DisposalBin();\n    this._logger = true ? new LogDispatcher(this) : void 0;\n    this.loading = \"visible\";\n    this._attemptingAutoplay = false;\n    this.controllerQueue = new RequestQueue();\n    this._store = createMediaStore();\n    this._state = unwrapStoreRecord(this._store);\n    this.connectedQueue = hostRequestQueue(this);\n    this.mediaQueue = new RequestQueue();\n    this.screenOrientationController = new ScreenOrientationController(this);\n    this.fullscreenController = new FullscreenController(this, this.screenOrientationController);\n    discoverable(this, \"vds-media-provider-connect\", {\n      register: mediaProviderDiscoveryId\n    });\n    const intersectionController = createIntersectionController(this, {\n      target: this,\n      threshold: 0\n    }, entries => {\n      if (!/(visible|lazy)/.test(this.loading)) {\n        intersectionController.hostDisconnected();\n        return;\n      }\n      if (entries[0]?.isIntersecting) {\n        this.startLoadingMedia();\n        intersectionController.hostDisconnected();\n      }\n    });\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this._logMediaEvents();\n    window.requestAnimationFrame(() => {\n      if (isUndefined(this.canLoadPoster)) {\n        this.canLoadPoster = true;\n      }\n    });\n  }\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.dispatchEvent(vdsEvent(\"vds-fullscreen-support-change\", {\n      detail: this.canFullscreen\n    }));\n    if (this.canLoad || this.loading === \"eager\") {\n      window?.requestAnimationFrame(() => {\n        this.startLoadingMedia();\n      });\n    } else if (this.loading === \"idle\") {\n      requestIdleCallback(() => {\n        this.startLoadingMedia();\n      });\n    }\n  }\n  render() {\n    return html`<slot @slotchange=\"${this.handleDefaultSlotChange}\"></slot>`;\n  }\n  disconnectedCallback() {\n    this._updateMediaStoreOnDisconnect(this._store);\n    this.mediaQueue.destroy();\n    this._disconnectDisposal.empty();\n    super.disconnectedCallback();\n    raf(() => {\n      raf(() => {\n        if (!this.isConnected) this.destroy();\n      });\n    });\n  }\n  _updateMediaStoreOnDisconnect(store) {\n    store.paused.set(true);\n    store.playing.set(false);\n    store.seeking.set(false);\n    store.waiting.set(false);\n    store.fullscreen.set(false);\n  }\n  destroy() {\n    if (this.isConnected) this.disconnectedCallback();\n    this.dispatchEvent(vdsEvent(\"vds-destroy\"));\n  }\n  _logMediaEvents() {\n    if (true) {\n      const mediaEvents = [\"vds-abort\", \"vds-can-play\", \"vds-can-play-through\", \"vds-current-src-change\", \"vds-duration-change\", \"vds-emptied\", \"vds-ended\", \"vds-error\", \"vds-fullscreen-change\", \"vds-loaded-data\", \"vds-loaded-metadata\", \"vds-load-start\", \"vds-media-type-change\", \"vds-pause\", \"vds-play\", \"vds-playing\", \"vds-progress\", \"vds-seeked\", \"vds-seeking\", \"vds-stalled\", \"vds-started\", \"vds-suspend\", \"vds-replay\", \"vds-view-type-change\", \"vds-volume-change\", \"vds-waiting\"];\n      mediaEvents.forEach(eventType => {\n        const dispose = listen(this, eventType, event => {\n          this._logger?.infoGroup(`\\u{1F4E1} dispatching \\`${eventType}\\``).labelledLog(\"State\", {\n            ...this.state\n          }).labelledLog(\"Event\", event).dispatch();\n        });\n        this._disconnectDisposal.add(dispose);\n      });\n    }\n  }\n  get volume() {\n    return this._getVolume();\n  }\n  set volume(newVolume) {\n    this.mediaQueue.queue(\"volume\", () => {\n      const oldVol = this.volume;\n      const newVol = clampNumber(0, newVolume, 1);\n      if (oldVol !== newVol) {\n        this._setVolume(newVol);\n        this.requestUpdate(\"volume\", oldVol);\n      }\n    });\n  }\n  get paused() {\n    return this._getPaused();\n  }\n  set paused(newPaused) {\n    this.mediaQueue.queue(\"paused\", () => {\n      if (this.paused === newPaused) return;\n      try {\n        if (!newPaused) {\n          this.play();\n        } else {\n          this.pause();\n        }\n        this.requestUpdate(\"paused\", !newPaused);\n      } catch (e) {\n        this._logger?.error(\"paused-change-fail\", e);\n      }\n    });\n  }\n  get currentTime() {\n    return this._getCurrentTime();\n  }\n  set currentTime(newTime) {\n    this.mediaQueue.queue(\"current-time\", () => {\n      const oldTime = this.currentTime;\n      if (oldTime !== newTime) {\n        this._setCurrentTime(newTime);\n        this.requestUpdate(\"currentTime\", oldTime);\n      }\n    });\n  }\n  get muted() {\n    return this._getMuted();\n  }\n  set muted(newMuted) {\n    this.mediaQueue.queue(\"muted\", () => {\n      const oldMuted = this.muted;\n      if (oldMuted !== newMuted) {\n        this._setMuted(newMuted);\n        this.requestUpdate(\"muted\", oldMuted);\n      }\n    });\n  }\n  get poster() {\n    return this.state.poster;\n  }\n  set poster(newPoster) {\n    const oldPoster = this.poster;\n    if (oldPoster !== newPoster) {\n      this.dispatchEvent(vdsEvent(\"vds-poster-change\", {\n        detail: newPoster\n      }));\n      this.requestUpdate(\"poster\", oldPoster);\n    }\n  }\n  get loop() {\n    return this.state.loop;\n  }\n  set loop(newLoop) {\n    const oldLoop = this.loop;\n    if (oldLoop !== newLoop) {\n      this.dispatchEvent(vdsEvent(\"vds-loop-change\", {\n        detail: newLoop\n      }));\n      this.requestUpdate(\"loop\", oldLoop);\n    }\n  }\n  get controls() {\n    return this.state.controls;\n  }\n  set controls(newControls) {\n    const oldControls = this.controls;\n    if (oldControls !== newControls) {\n      this.dispatchEvent(vdsEvent(\"vds-controls-change\", {\n        detail: newControls\n      }));\n      this.requestUpdate(\"controls\", oldControls);\n    }\n  }\n  get canLoad() {\n    return this.state.canLoad;\n  }\n  startLoadingMedia() {\n    if (this.state.canPlay) return;\n    this.dispatchEvent(vdsEvent(\"vds-can-load\"));\n  }\n  _throwIfNotReadyForPlayback() {\n    if (!this.state.canPlay) {\n      throw Error(`Media is not ready - wait for \\`vds-can-play\\` event.`);\n    }\n  }\n  async _resetPlaybackIfEnded() {\n    if (!this.state.ended || this.state.currentTime === 0) return;\n    return this._setCurrentTime(0);\n  }\n  _throwIfNotVideoView() {\n    if (this.state.viewType !== \"video\" /* Video */) {\n      throw Error(\"Player is currently not in a video view.\");\n    }\n  }\n  async _handleMediaReady({\n    event,\n    duration\n  }) {\n    if (this.state.canPlay) return;\n    this.dispatchEvent(vdsEvent(\"vds-can-play\", {\n      triggerEvent: event,\n      detail: {\n        duration\n      }\n    }));\n    this.mediaQueue.start();\n    if (true) {\n      this._logger?.infoGroup(\"-~-~-~-~-~-~-~-~- \\u2705 MEDIA READY -~-~-~-~-~-~-~-~-\").labelledLog(\"State\", {\n        ...this.state\n      }).labelledLog(\"Event\", event).dispatch();\n    }\n    await this._attemptAutoplay();\n  }\n  _handleCurrentSrcChange(currentSrc, triggerEvent) {\n    if (this.state.currentSrc === currentSrc) return;\n    if (true) {\n      this._logger?.infoGroup(\"\\u{1F4FC} Media source change\").labelledLog(\"Src\", this.state.src).labelledLog(\"Current Src\", currentSrc).dispatch();\n    }\n    this.mediaQueue.stop();\n    this.dispatchEvent(vdsEvent(\"vds-current-src-change\", {\n      detail: currentSrc,\n      triggerEvent\n    }));\n  }\n  get autoplay() {\n    return this.state.autoplay;\n  }\n  set autoplay(newAutoplay) {\n    if (this.autoplay !== newAutoplay) {\n      this.dispatchEvent(vdsEvent(\"vds-autoplay-change\", {\n        detail: newAutoplay\n      }));\n      this.requestUpdate(\"autoplay\", !newAutoplay);\n    }\n    this._attemptAutoplay();\n  }\n  get _canAttemptAutoplay() {\n    return this.state.canPlay && this.state.autoplay && !this.state.started;\n  }\n  async _attemptAutoplay() {\n    if (!this._canAttemptAutoplay) return;\n    this._attemptingAutoplay = true;\n    try {\n      await this.play();\n      this.dispatchEvent(vdsEvent(\"vds-autoplay\", {\n        detail: {\n          muted: this.muted\n        }\n      }));\n    } catch (error) {\n      this.dispatchEvent(vdsEvent(\"vds-autoplay-fail\", {\n        detail: {\n          muted: this.muted,\n          error\n        }\n      }));\n      this.requestUpdate();\n    }\n    this._attemptingAutoplay = false;\n  }\n  get controller() {\n    return this._controller;\n  }\n  get logLevel() {\n    return this._controller?.logLevel ?? \"silent\";\n  }\n  set logLevel(level) {\n    if (true) {\n      this.controllerQueue.queue(\"log-level\", () => {\n        this._controller.logLevel = level;\n      });\n    }\n  }\n  get idleDelay() {\n    return this._controller?.idleDelay ?? 0;\n  }\n  set idleDelay(delay) {\n    this.controllerQueue.queue(\"idle-delay\", () => {\n      this._controller.idleDelay = delay;\n    });\n  }\n  attachMediaController(controller, onDisconnect) {\n    this._controller = controller;\n    this._store = controller._store;\n    this._state = controller.state;\n    this.controllerQueue.start();\n    onDisconnect(() => {\n      this.controllerQueue.destroy();\n      this._store = createMediaStore();\n      this._state = unwrapStoreRecord(this._store);\n      if (this._controller) {\n        copyStoreRecords(this._controller._store, this._store);\n        this._updateMediaStoreOnDisconnect(this._controller._store);\n      }\n      this._controller = void 0;\n    });\n  }\n  dispatchEvent(event) {\n    if (!this._controller && event.type.startsWith(\"vds-\") && event.type !== \"vds-destroy\") {\n      this.controllerQueue.queue(event.type, () => {\n        super.dispatchEvent(event);\n      });\n      return false;\n    }\n    return super.dispatchEvent(event);\n  }\n  store() {\n    return this._store;\n  }\n  get state() {\n    return this._state;\n  }\n  get canFullscreen() {\n    return this.fullscreenController.isSupported;\n  }\n  get fullscreen() {\n    return this.fullscreenController.isFullscreen;\n  }\n  get fullscreenOrientation() {\n    return this.fullscreenController.screenOrientationLock;\n  }\n  set fullscreenOrientation(lockType) {\n    const prevLockType = this.fullscreenController.screenOrientationLock;\n    if (prevLockType !== lockType) {\n      this.fullscreenController.screenOrientationLock = lockType;\n      this.requestUpdate(\"fullscreen-orientation\", prevLockType);\n    }\n  }\n  enterFullscreen() {\n    return this.fullscreenController.enterFullscreen();\n  }\n  exitFullscreen() {\n    return this.fullscreenController.exitFullscreen();\n  }\n};\n__decorateClass([property({\n  type: Number\n})], MediaProviderElement.prototype, \"volume\", 1);\n__decorateClass([property({\n  type: Boolean\n})], MediaProviderElement.prototype, \"paused\", 1);\n__decorateClass([property({\n  type: Number\n})], MediaProviderElement.prototype, \"currentTime\", 1);\n__decorateClass([property({\n  type: Boolean\n})], MediaProviderElement.prototype, \"muted\", 1);\n__decorateClass([property()], MediaProviderElement.prototype, \"poster\", 1);\n__decorateClass([property({\n  type: Boolean\n})], MediaProviderElement.prototype, \"loop\", 1);\n__decorateClass([property({\n  type: Boolean\n})], MediaProviderElement.prototype, \"controls\", 1);\n__decorateClass([state()], MediaProviderElement.prototype, \"canLoadPoster\", 2);\n__decorateClass([property({\n  attribute: \"loading\"\n})], MediaProviderElement.prototype, \"loading\", 2);\n__decorateClass([property({\n  type: Boolean\n})], MediaProviderElement.prototype, \"autoplay\", 1);\n__decorateClass([property({\n  attribute: \"log-level\"\n})], MediaProviderElement.prototype, \"logLevel\", 1);\n__decorateClass([property({\n  attribute: \"idle-delay\",\n  type: Number\n})], MediaProviderElement.prototype, \"idleDelay\", 1);\n__decorateClass([property({\n  attribute: \"fullscreen-orientation\"\n})], MediaProviderElement.prototype, \"fullscreenOrientation\", 1);\nexport { mediaProviderDiscoveryId, MediaProviderElement };","map":{"version":3,"names":["createMediaStore","__decorateClass","clampNumber","copyStoreRecords","createIntersectionController","discoverable","DisposalBin","FullscreenController","hostRequestQueue","isUndefined","listen","LogDispatcher","raf","requestIdleCallback","RequestQueue","ScreenOrientationController","unwrapStoreRecord","vdsEvent","html","LitElement","property","state","mediaProviderDiscoveryId","Symbol","MediaProviderElement","constructor","_disconnectDisposal","_logger","loading","_attemptingAutoplay","controllerQueue","_store","_state","connectedQueue","mediaQueue","screenOrientationController","fullscreenController","register","intersectionController","target","threshold","entries","test","hostDisconnected","isIntersecting","startLoadingMedia","connectedCallback","_logMediaEvents","window","requestAnimationFrame","canLoadPoster","firstUpdated","changedProperties","dispatchEvent","detail","canFullscreen","canLoad","render","handleDefaultSlotChange","disconnectedCallback","_updateMediaStoreOnDisconnect","destroy","empty","isConnected","store","paused","set","playing","seeking","waiting","fullscreen","mediaEvents","forEach","eventType","dispose","event","infoGroup","labelledLog","dispatch","add","volume","_getVolume","newVolume","queue","oldVol","newVol","_setVolume","requestUpdate","_getPaused","newPaused","play","pause","e","error","currentTime","_getCurrentTime","newTime","oldTime","_setCurrentTime","muted","_getMuted","newMuted","oldMuted","_setMuted","poster","newPoster","oldPoster","loop","newLoop","oldLoop","controls","newControls","oldControls","canPlay","_throwIfNotReadyForPlayback","Error","_resetPlaybackIfEnded","ended","_throwIfNotVideoView","viewType","_handleMediaReady","duration","triggerEvent","start","_attemptAutoplay","_handleCurrentSrcChange","currentSrc","src","stop","autoplay","newAutoplay","_canAttemptAutoplay","started","controller","_controller","logLevel","level","idleDelay","delay","attachMediaController","onDisconnect","type","startsWith","isSupported","isFullscreen","fullscreenOrientation","screenOrientationLock","lockType","prevLockType","enterFullscreen","exitFullscreen","Number","prototype","Boolean","attribute"],"sources":["/Users/andrewkallmeyer/kall.com/node_modules/@vidstack/player/dist/dev/chunks/chunk.BJN6YOPG.js"],"sourcesContent":["import {\n  createMediaStore\n} from \"./chunk.O2H47C42.js\";\nimport {\n  __decorateClass\n} from \"./chunk.LNH2V2XS.js\";\n\n// src/media/provider/MediaProviderElement.ts\nimport {\n  clampNumber,\n  copyStoreRecords,\n  createIntersectionController,\n  discoverable,\n  DisposalBin,\n  FullscreenController,\n  hostRequestQueue,\n  isUndefined,\n  listen,\n  LogDispatcher,\n  raf,\n  requestIdleCallback,\n  RequestQueue,\n  ScreenOrientationController,\n  unwrapStoreRecord,\n  vdsEvent\n} from \"@vidstack/foundation\";\nimport { html, LitElement } from \"lit\";\nimport { property, state } from \"lit/decorators.js\";\nvar mediaProviderDiscoveryId = Symbol(\"@vidstack/media-provider-discovery\");\nvar MediaProviderElement = class extends LitElement {\n  constructor() {\n    super();\n    this._disconnectDisposal = new DisposalBin();\n    this._logger = true ? new LogDispatcher(this) : void 0;\n    this.loading = \"visible\";\n    this._attemptingAutoplay = false;\n    this.controllerQueue = new RequestQueue();\n    this._store = createMediaStore();\n    this._state = unwrapStoreRecord(this._store);\n    this.connectedQueue = hostRequestQueue(this);\n    this.mediaQueue = new RequestQueue();\n    this.screenOrientationController = new ScreenOrientationController(this);\n    this.fullscreenController = new FullscreenController(this, this.screenOrientationController);\n    discoverable(this, \"vds-media-provider-connect\", { register: mediaProviderDiscoveryId });\n    const intersectionController = createIntersectionController(\n      this,\n      { target: this, threshold: 0 },\n      (entries) => {\n        if (!/(visible|lazy)/.test(this.loading)) {\n          intersectionController.hostDisconnected();\n          return;\n        }\n        if (entries[0]?.isIntersecting) {\n          this.startLoadingMedia();\n          intersectionController.hostDisconnected();\n        }\n      }\n    );\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this._logMediaEvents();\n    window.requestAnimationFrame(() => {\n      if (isUndefined(this.canLoadPoster)) {\n        this.canLoadPoster = true;\n      }\n    });\n  }\n  firstUpdated(changedProperties) {\n    super.firstUpdated(changedProperties);\n    this.dispatchEvent(\n      vdsEvent(\"vds-fullscreen-support-change\", {\n        detail: this.canFullscreen\n      })\n    );\n    if (this.canLoad || this.loading === \"eager\") {\n      window?.requestAnimationFrame(() => {\n        this.startLoadingMedia();\n      });\n    } else if (this.loading === \"idle\") {\n      requestIdleCallback(() => {\n        this.startLoadingMedia();\n      });\n    }\n  }\n  render() {\n    return html`<slot @slotchange=\"${this.handleDefaultSlotChange}\"></slot>`;\n  }\n  disconnectedCallback() {\n    this._updateMediaStoreOnDisconnect(this._store);\n    this.mediaQueue.destroy();\n    this._disconnectDisposal.empty();\n    super.disconnectedCallback();\n    raf(() => {\n      raf(() => {\n        if (!this.isConnected)\n          this.destroy();\n      });\n    });\n  }\n  _updateMediaStoreOnDisconnect(store) {\n    store.paused.set(true);\n    store.playing.set(false);\n    store.seeking.set(false);\n    store.waiting.set(false);\n    store.fullscreen.set(false);\n  }\n  destroy() {\n    if (this.isConnected)\n      this.disconnectedCallback();\n    this.dispatchEvent(vdsEvent(\"vds-destroy\"));\n  }\n  _logMediaEvents() {\n    if (true) {\n      const mediaEvents = [\n        \"vds-abort\",\n        \"vds-can-play\",\n        \"vds-can-play-through\",\n        \"vds-current-src-change\",\n        \"vds-duration-change\",\n        \"vds-emptied\",\n        \"vds-ended\",\n        \"vds-error\",\n        \"vds-fullscreen-change\",\n        \"vds-loaded-data\",\n        \"vds-loaded-metadata\",\n        \"vds-load-start\",\n        \"vds-media-type-change\",\n        \"vds-pause\",\n        \"vds-play\",\n        \"vds-playing\",\n        \"vds-progress\",\n        \"vds-seeked\",\n        \"vds-seeking\",\n        \"vds-stalled\",\n        \"vds-started\",\n        \"vds-suspend\",\n        \"vds-replay\",\n        \"vds-view-type-change\",\n        \"vds-volume-change\",\n        \"vds-waiting\"\n      ];\n      mediaEvents.forEach((eventType) => {\n        const dispose = listen(this, eventType, (event) => {\n          this._logger?.infoGroup(`\\u{1F4E1} dispatching \\`${eventType}\\``).labelledLog(\"State\", { ...this.state }).labelledLog(\"Event\", event).dispatch();\n        });\n        this._disconnectDisposal.add(dispose);\n      });\n    }\n  }\n  get volume() {\n    return this._getVolume();\n  }\n  set volume(newVolume) {\n    this.mediaQueue.queue(\"volume\", () => {\n      const oldVol = this.volume;\n      const newVol = clampNumber(0, newVolume, 1);\n      if (oldVol !== newVol) {\n        this._setVolume(newVol);\n        this.requestUpdate(\"volume\", oldVol);\n      }\n    });\n  }\n  get paused() {\n    return this._getPaused();\n  }\n  set paused(newPaused) {\n    this.mediaQueue.queue(\"paused\", () => {\n      if (this.paused === newPaused)\n        return;\n      try {\n        if (!newPaused) {\n          this.play();\n        } else {\n          this.pause();\n        }\n        this.requestUpdate(\"paused\", !newPaused);\n      } catch (e) {\n        this._logger?.error(\"paused-change-fail\", e);\n      }\n    });\n  }\n  get currentTime() {\n    return this._getCurrentTime();\n  }\n  set currentTime(newTime) {\n    this.mediaQueue.queue(\"current-time\", () => {\n      const oldTime = this.currentTime;\n      if (oldTime !== newTime) {\n        this._setCurrentTime(newTime);\n        this.requestUpdate(\"currentTime\", oldTime);\n      }\n    });\n  }\n  get muted() {\n    return this._getMuted();\n  }\n  set muted(newMuted) {\n    this.mediaQueue.queue(\"muted\", () => {\n      const oldMuted = this.muted;\n      if (oldMuted !== newMuted) {\n        this._setMuted(newMuted);\n        this.requestUpdate(\"muted\", oldMuted);\n      }\n    });\n  }\n  get poster() {\n    return this.state.poster;\n  }\n  set poster(newPoster) {\n    const oldPoster = this.poster;\n    if (oldPoster !== newPoster) {\n      this.dispatchEvent(vdsEvent(\"vds-poster-change\", { detail: newPoster }));\n      this.requestUpdate(\"poster\", oldPoster);\n    }\n  }\n  get loop() {\n    return this.state.loop;\n  }\n  set loop(newLoop) {\n    const oldLoop = this.loop;\n    if (oldLoop !== newLoop) {\n      this.dispatchEvent(vdsEvent(\"vds-loop-change\", { detail: newLoop }));\n      this.requestUpdate(\"loop\", oldLoop);\n    }\n  }\n  get controls() {\n    return this.state.controls;\n  }\n  set controls(newControls) {\n    const oldControls = this.controls;\n    if (oldControls !== newControls) {\n      this.dispatchEvent(vdsEvent(\"vds-controls-change\", { detail: newControls }));\n      this.requestUpdate(\"controls\", oldControls);\n    }\n  }\n  get canLoad() {\n    return this.state.canLoad;\n  }\n  startLoadingMedia() {\n    if (this.state.canPlay)\n      return;\n    this.dispatchEvent(vdsEvent(\"vds-can-load\"));\n  }\n  _throwIfNotReadyForPlayback() {\n    if (!this.state.canPlay) {\n      throw Error(`Media is not ready - wait for \\`vds-can-play\\` event.`);\n    }\n  }\n  async _resetPlaybackIfEnded() {\n    if (!this.state.ended || this.state.currentTime === 0)\n      return;\n    return this._setCurrentTime(0);\n  }\n  _throwIfNotVideoView() {\n    if (this.state.viewType !== \"video\" /* Video */) {\n      throw Error(\"Player is currently not in a video view.\");\n    }\n  }\n  async _handleMediaReady({ event, duration }) {\n    if (this.state.canPlay)\n      return;\n    this.dispatchEvent(\n      vdsEvent(\"vds-can-play\", {\n        triggerEvent: event,\n        detail: { duration }\n      })\n    );\n    this.mediaQueue.start();\n    if (true) {\n      this._logger?.infoGroup(\"-~-~-~-~-~-~-~-~- \\u2705 MEDIA READY -~-~-~-~-~-~-~-~-\").labelledLog(\"State\", { ...this.state }).labelledLog(\"Event\", event).dispatch();\n    }\n    await this._attemptAutoplay();\n  }\n  _handleCurrentSrcChange(currentSrc, triggerEvent) {\n    if (this.state.currentSrc === currentSrc)\n      return;\n    if (true) {\n      this._logger?.infoGroup(\"\\u{1F4FC} Media source change\").labelledLog(\"Src\", this.state.src).labelledLog(\"Current Src\", currentSrc).dispatch();\n    }\n    this.mediaQueue.stop();\n    this.dispatchEvent(\n      vdsEvent(\"vds-current-src-change\", {\n        detail: currentSrc,\n        triggerEvent\n      })\n    );\n  }\n  get autoplay() {\n    return this.state.autoplay;\n  }\n  set autoplay(newAutoplay) {\n    if (this.autoplay !== newAutoplay) {\n      this.dispatchEvent(vdsEvent(\"vds-autoplay-change\", { detail: newAutoplay }));\n      this.requestUpdate(\"autoplay\", !newAutoplay);\n    }\n    this._attemptAutoplay();\n  }\n  get _canAttemptAutoplay() {\n    return this.state.canPlay && this.state.autoplay && !this.state.started;\n  }\n  async _attemptAutoplay() {\n    if (!this._canAttemptAutoplay)\n      return;\n    this._attemptingAutoplay = true;\n    try {\n      await this.play();\n      this.dispatchEvent(vdsEvent(\"vds-autoplay\", { detail: { muted: this.muted } }));\n    } catch (error) {\n      this.dispatchEvent(\n        vdsEvent(\"vds-autoplay-fail\", {\n          detail: {\n            muted: this.muted,\n            error\n          }\n        })\n      );\n      this.requestUpdate();\n    }\n    this._attemptingAutoplay = false;\n  }\n  get controller() {\n    return this._controller;\n  }\n  get logLevel() {\n    return this._controller?.logLevel ?? \"silent\";\n  }\n  set logLevel(level) {\n    if (true) {\n      this.controllerQueue.queue(\"log-level\", () => {\n        this._controller.logLevel = level;\n      });\n    }\n  }\n  get idleDelay() {\n    return this._controller?.idleDelay ?? 0;\n  }\n  set idleDelay(delay) {\n    this.controllerQueue.queue(\"idle-delay\", () => {\n      this._controller.idleDelay = delay;\n    });\n  }\n  attachMediaController(controller, onDisconnect) {\n    this._controller = controller;\n    this._store = controller._store;\n    this._state = controller.state;\n    this.controllerQueue.start();\n    onDisconnect(() => {\n      this.controllerQueue.destroy();\n      this._store = createMediaStore();\n      this._state = unwrapStoreRecord(this._store);\n      if (this._controller) {\n        copyStoreRecords(this._controller._store, this._store);\n        this._updateMediaStoreOnDisconnect(this._controller._store);\n      }\n      this._controller = void 0;\n    });\n  }\n  dispatchEvent(event) {\n    if (!this._controller && event.type.startsWith(\"vds-\") && event.type !== \"vds-destroy\") {\n      this.controllerQueue.queue(event.type, () => {\n        super.dispatchEvent(event);\n      });\n      return false;\n    }\n    return super.dispatchEvent(event);\n  }\n  store() {\n    return this._store;\n  }\n  get state() {\n    return this._state;\n  }\n  get canFullscreen() {\n    return this.fullscreenController.isSupported;\n  }\n  get fullscreen() {\n    return this.fullscreenController.isFullscreen;\n  }\n  get fullscreenOrientation() {\n    return this.fullscreenController.screenOrientationLock;\n  }\n  set fullscreenOrientation(lockType) {\n    const prevLockType = this.fullscreenController.screenOrientationLock;\n    if (prevLockType !== lockType) {\n      this.fullscreenController.screenOrientationLock = lockType;\n      this.requestUpdate(\"fullscreen-orientation\", prevLockType);\n    }\n  }\n  enterFullscreen() {\n    return this.fullscreenController.enterFullscreen();\n  }\n  exitFullscreen() {\n    return this.fullscreenController.exitFullscreen();\n  }\n};\n__decorateClass([\n  property({ type: Number })\n], MediaProviderElement.prototype, \"volume\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], MediaProviderElement.prototype, \"paused\", 1);\n__decorateClass([\n  property({ type: Number })\n], MediaProviderElement.prototype, \"currentTime\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], MediaProviderElement.prototype, \"muted\", 1);\n__decorateClass([\n  property()\n], MediaProviderElement.prototype, \"poster\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], MediaProviderElement.prototype, \"loop\", 1);\n__decorateClass([\n  property({ type: Boolean })\n], MediaProviderElement.prototype, \"controls\", 1);\n__decorateClass([\n  state()\n], MediaProviderElement.prototype, \"canLoadPoster\", 2);\n__decorateClass([\n  property({ attribute: \"loading\" })\n], MediaProviderElement.prototype, \"loading\", 2);\n__decorateClass([\n  property({ type: Boolean })\n], MediaProviderElement.prototype, \"autoplay\", 1);\n__decorateClass([\n  property({ attribute: \"log-level\" })\n], MediaProviderElement.prototype, \"logLevel\", 1);\n__decorateClass([\n  property({ attribute: \"idle-delay\", type: Number })\n], MediaProviderElement.prototype, \"idleDelay\", 1);\n__decorateClass([\n  property({ attribute: \"fullscreen-orientation\" })\n], MediaProviderElement.prototype, \"fullscreenOrientation\", 1);\n\nexport {\n  mediaProviderDiscoveryId,\n  MediaProviderElement\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}